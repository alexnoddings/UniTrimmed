@using EduLocate.Core
@model IEnumerable<EduLocate.Core.School>

@{
    ViewData["Title"] = "Schools Index";
}

<h2>Schools Index</h2>

<div>
    <div class="mr-auto">
        <a asp-action="Index" asp-route-page="@((int) (ViewData["page"] ?? 0) - 1)" class="btn btn-outline-secondary @((int) (ViewData["page"] ?? 0) <= 0 ? "disabled" : "")">Previous</a>
        <a asp-action="Index" asp-route-page="@((int) (ViewData["page"] ?? 0) + 1)" class="btn btn-outline-secondary">Next</a>
    </div>
    <a asp-action="Create" class="btn btn-outline-secondary">Create New</a>
    <form class="form-inline my-2 my-md-0" asp-action="Index" method="get">
        <input type="text" name="filter" value="@ViewData["filter"]"/>
        <input type="submit" value="Search" class="btn btn-outline-primary m-2"/>
    </form>
</div>

<table class="table table-striped table-sm">
    <thead>
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Id)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Name)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Address)
        </th>
        <th></th>
    </tr>
    </thead>
    <tbody>
    @foreach (School item in Model)
    {
        <tr>
            <th scope="row">
                @Html.DisplayFor(modelItem => item.Id)
            </th>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Address)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a>
            </td>
        </tr>
    }
    </tbody>
</table>

<a asp-action="Index" asp-route-page="@((int) (ViewData["page"] ?? 0) - 1)" class="btn btn-outline-secondary @((int) (ViewData["page"] ?? 0) <= 0 ? "disabled" : "")">Previous</a>
<a asp-action="Index" asp-route-page="@((int) (ViewData["page"] ?? 0) + 1)" class="btn btn-outline-secondary">Next</a>